# Kung Architecture & Development Guide

## Project Overview

Kung is a simple C/Swift inspired programming language with static typing system.

Compiler is written in Swift with C Virtual Machine for targeting embedded ARM
microcontrollers like Arduino C33 200MHz CPU with 512KB SRAM.

The goal is to compile text on a laptop/smartphone (macOS/iOS) into bytecode,
then send the instructions via BLE/WiFi to the microcontroller and execute them there.
The hardware setup and workflow will be similar to Monome Crow,
except for a compiler running on an external device.
Performance wise I'd like to beat Lua while implementing minimum optimisations to keep things simple.
This project only touches the program compilation and execution,
leaving aside any means of communication between devices.

## Architecture Overview

Only static allocation out of the box, with a special case for closures.

Word size is 32-bit.

Pointers are 16-bit and minimum offset is a word. Stack size is 256 * 256 * 4 bytes `256KB`.
Closures take up an additional 64 * 256 * 4 bytes `64KB`. Leaving the rest `192KB` to the C runtime.
Pointers can only reference stack. It is not possible to make a pointer to the closures space.

Closures are preallocated behind the stack and limited in quantity and size.
There are 256 total closures (255 user-allocatable + 1 reserved).

Exceeding closures count is a runtime error. Exceeding closure size is a compile-time error.
Closure size is 64 words.

Instructions are 32-bits wide, with the following layout:
	`opcode: UInt8, x: UInt8, y: UInt8, z: UInt8`.
Some instructions combine `y` and `z` to `yz: UInt16`

Two bits from either `x`, `y` or `z` encode the selector and the remaining 6 bits represent
the register address.

Selectors:
* 0b00 —> top of the stack
* 0b01 —> current closure
* 0b10 —> auxilary closure
* 0b11 —> bottom of the stack

That way it is possible to access any word in current and aux closures,
and 64 first and last words from the stack in any instruction.
For complete picture, see `./Sources/Machine/include/machine.h`.

Closures are reference-counted and have reference semantics. The rest has value semantics.

A function can capture a single closure. The same closure may be shared between multiple functions.
When function is called, it's closure becomes current. Function is static when `closure == 0`.

Function layout:
	`address: UInt16, reserved: UInt8, closure: UInt8`

Capture list is implicit. If any non-root scope variable gets referenced inside a function then it's captured.
Root scope variables are not going anywhere, so it is safe to reference their stack address.

If a function is escaping, then the context it captures resides in a closure instead of a stack. 
Compiler needs to detect escaping. Consider returning the function, passing it as an argument to
another function or storing it to a variable — any of above will mark the function as escaping.

The grammar is specified in `./GRAMMAR.md`

### Program Compiler Design

* `Parser` struct is a parser that produces the AST from `[Token]`
* `Scope` struct represents the AST
* `Scope.precompile()` function is a place for additional passes with the help of `Scope.traverse`
* `Scope.compile()` function produces `Program`
* `Program` struct contains instructions for VM

## Development Workflow

Keep in mind `./GOALS.md`.

In Plan mode when working on a task, feel free to suggest architecture changes if you think
they will simplify overall implementation.

In Act mode run tests to ensure all features are implemented correctly before finishing task.
Write new tests for untested features.

Learn the project codebase. Adapt your coding style. Comments considered harmful.
Use comments only when you are unsure of implementation or when implementing an unusual pattern.
The code should be self-documenting and easy to understand without comments.
